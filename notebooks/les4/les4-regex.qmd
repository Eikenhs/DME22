---
title: Regular expressions
author: Raoul Grouls & Jan-Willem Lankhaar 
format: 
    revealjs:
        theme: solarized
---

## Regular expressions

A sequence of characters that defines a (search) pattern in text

---

## Example

### `\d{4}\s[A-Z]{2}`

This reads as

- A digit `\d` repeated four times `{4}`
- A whitespace character `\s`
- A capital letter `[A-Z]` repeated two times `{2}`

Do you recognize this pattern?

---

The pattern `\d{4}\s[A-Z]{2}` matches with

- `2461 BV`
- `3607 DR`

But not with

- `2461 bv`
- `2461bv`
- `2000 years`

---

Regular expressions allow you to define very precise search patterns with which you can extract data from raw text.

---

# Let's add some flexibility

- Make the space optional
- Allow lowercase letters

##

### `\d{4}\s?[A-Za-z]{2}`

Modifications:

- The `a-z` in `[A-Za-z]` makes it case insensitive
- The `?` in `\s?` makes the preceding character optional

---

## Now our  pattern

### `\d{4}\s?[A-Za-z]{2}`

matches

- `2461 BV`
- `2461bv`
- `2461 bv`

---

## Building blocks of regular expressions

- Character classes
    - Any single character: `.`
    - A character in: `[abc]` matches `a`, `b` or `c`
    - Any character except: `[^abc]` matches `x`, `y` but not `a`
    - Any character in the range: `[a-z]` matches `a`, `b`, `c`, ..., `z`
    - Any digit: `\d` matches `0` or `5`
    - Any non-digit: `\D` matches `a` but not `9`
---

## Building blocks of regular expressions

- Quantifiers
    - One or more times: `a+` matches `a` as well as `aaa`
    - Zero or more times: `a?` matches `` and `a`
    - Up to `n` times: `a{,2}` matches `a`, `aa` but not `aaa`
- Conditionals and groups
    - One or other subpattern: `<subpattern> | <subpattern>`
    - Group: `(...)` makes the parenthesized part available as a single unit
    - Named group: `(?P<name>...)` assigns a name to the group

---

## Building blocks of regular expressions

- Look around
    - Look ahead: `(?=...)`
    - Look behind: `(?<=...)` 


---

## Regular expressions in Python

```python
import re
```

Important functions:

- `re.compile()`: create a pattern (optional, but advised)
- `re.match()`: see if a string matches the pattern
- `re.search()`: search *within* a string for a pattern
- `re.findall()`: return a matches *within* a string
- `re.sub()`: replace matches of a pattern in a string

--- 

## More about the pattern

Always use a raw string:

```python

pattern = r'\d{4}\s\[A-Z]{2}'
```

If you use non-raw strings, you have to escape the `\` (i.e. it has to be written as `\\`).

---

## Use `re.VERBOSE`

```python

pattern = r"""\d{4}         # four digits
              \s?           # a space (optional)
              [A-Za-z]{2]}  # two characters
           """

re.match(pattern, mystring, re.VERBOSE)

```

---

## Regular expressions lifesaver!

`www.regex101.com`

Important! Mind the dialect (should be Python)

---

Writing regular expressions can be challenging but also very satisfying!